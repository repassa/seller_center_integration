continue
xml
c
headers
c
headers
c
headers
c
"get".to_sym
"1".to_sym
headers
params
endpoint
http_method
c
ap response.body
ap response.body.to_json
ap response.body.tp_json
ap response.body
response.body
c
response.body
ap response.body
response.body
c
http_method
c
http_method
c
params
response.body
c
params
endpoint
response.body
c
params
endpoint
http_method
response.body
c
reload!
relaod!
response.body
c
response.status
response.body
c
continue
[].include? 1
[].includes? 1
response.status
response.body
c
relaod!
params
"#{resource}/#{return_type}"
return_type
http_method
params
resource
c
params
n
params
api_key
c
params
http_method
resource
c
continue
default_request('notaservico', :post, params)
params
c
params
endpoint
params
add_default_headers(headers)
c
base_url
endpoint
endpoint,
c
base_url
client
endpoint
c
xml
n
xml
c
xml
api_key
c
api_key
c
@options[:api_key]
@options
@api_key
self.api_key
api_key
c
ap builder.to_xml
c
ap builder.to_xml
c
ap builder.to_xml
c
cc
ap builder.to_xml
c
puts builder.to_xml
ap puts builder.to_xml
puts builder.to_xml
ap builder.to_xml
c
ap xml.to_xml
c
ap xml.to_xml
c
ap value
ap vakey
ap key
ap xml
continue
c
reload!
c
reload!
c
value
key
xml.to_xml
c
ap xml.to_xml
c
ap xml.to_xml
ap xml
builder.to_xml
c
ap builder
ap builder.xml
c
ap builder.xml
continue
builder.to_xml
c
xml.to_xml
xml
c
n
data[:cliente]
data
c
data
c
puts builder
ap builder
builder
n
c
data
error
n
continue
        }
          }
            }
              xml.CNPJ data[:cnpj_remetente] unless data[:cnpj_remetente].blank?
              xml.CPF data[:cpf_remetente] unless data[:cpf_remetente].blank?
            xml.CPFCNPJRemetente {
          xml.Cabecalho( "Versao" => "1", :xmlns => "" ) {
xml.send('cliente') {
        }
          send("add_#{method}_data_to_xml", xml, data, certificado)
          }
            send("add_#{method}_cabecalho_data_to_xml", xml, data, certificado)
            }
              xml.CNPJ data[:cnpj_remetente] unless data[:cnpj_remetente].blank?
              xml.CPF data[:cpf_remetente] unless data[:cpf_remetente].blank?
            xml.CPFCNPJRemetente {
          xml.Cabecalho( "Versao" => "1", :xmlns => "" ) {
xml.send('cliente') {
xml.send('cliente')
xml = Nokogiri::XML::Builder.new
continue
